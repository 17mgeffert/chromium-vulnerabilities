---
CVE: CVE-2010-2898
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2010-07-28 16:00:10.197000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: 
  The third-party xdg_mime library couldn't handle a large filepath, so Chrome would get a crash on opening large filepaths. xdg_mime is a utility used to examine files.
  
  This becomes a bigger problem because this impacts the LD_LOAD_LIBRARY path environment variable, which is the universal enviornment variable that specifies the shared libraries for the compiler. This means that you can use this vulnerability to load an arbitrary library (e.g. a virus) into the library of Chrome. This vulnerability got a CVSS Severity 10, which makes sense to this curator.
  
  A great description is given over at [the Red Hat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=644933)
  
  ```
  Ludwig Nussel discovered that gnucash contained a script that could be abused by an attacker to execute arbitrary code.

  The vulnerability is due to an insecure change to LD_LIBRARY_PATH, and environment variable used by ld.so(8) to look for libraries in directories other than the standard paths.  When there is an empty item in the colon-separated list of directories in LD_LIBRARY_PATH, ld.so(8) treats it as a '.' (current working directory).  If the given script is executed from a directory where a local attacker could write files, there is a chance for exploitation.

  In Fedora, /usr/bin/gnc-test-env re-sets LD_LIBRARY_PATH insecurely

    106 (display
    107  (adapt-dirsep
    108   (get-dir-adder "LD_LIBRARY_PATH" library-dirs "/.libs" path-sep-str))) 

    which could result in something like this if called with, say, --library-dir /foo

    LD_LIBRARY_PATH="/foo/.libs:${LD_LIBRARY_PATH}"  export LD_LIBRARY_PATH;
  ```
  
  The way that they fixed this was pretty trivial, just check the length of a filepath before sending it to the library. Also, they made sure that the library was fixed for this issue. So the fix involved defense-in-depth.
  
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 
  references: []
reviews:
- 2962017
- 2980002
bugs:
- 48733
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: bcf1de5da4d370c83c05428e4a55c20d55975cc6
  :note: ''
vccs:
- :commit: 586acc5fe142f498261f52c66862fa417c3d52d2
  :note: The fix involved entirely new code, so the VCC is marked as the spot when the function was originally written. This happens to be the initial commit of adding "net" to the system - it was there from the beginning.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: The subsystem uses unit tests, but the tests don't really test the underlying libraries. The fix did not involve a unit test.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: They credited the person (Ludwig Nussel) who is a contributor for openSUSE. No word on how he found it, but it appears it might have been found in the dependency (xdg_mime), so it might have been found there and escalated to Chromium.
  date: 2010-10-20
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: They refer to this subsystem as "net", and the file is in "/net/base"
  name: net
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: e122e6072c0fd97b990d08fae16b300d973456c9
    note: They discussed "preventing people" from doing some security-related checks to this API. Similar problem, but not exactly the same problem.
  - commit: bae0ea1f95c5c3a02761d942c0802ec877c1a106
    note: This was code modified right near the spot where they fixed this vulnerability. The commit was about "platform-specific" files, which could have brought up issues of filename length.
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: No major events during this time. It was about two years.
  events:
  - name: 
    date: 
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: Even though they fixed the problem in the dependency, they added their own check.
  least_privilege:
    applies: 
    note: 
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: This vulnerability involved using a 65,000+ character filename. 
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: true
    note: This involved allowing bad things into the LD_LIBRARY_PATH, which is a very important environment variable to protect.
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: 
    This vulnerability came from trusting the library to properly look for long filenames. They had tests, but those tests didn't distrust the API. The fix was easy, but it was entirely new code - so "finding" this problem is not about looking at bad code, but looking for missing code. The severity of this was quite high because it allowed modifying LD_LIBRARY_PATH, so that could have also been used to find this problem.
    
    Interestingly, they explicitly say in their comments that they are "copying Mozilla". I wonder if they didn't think about security when copying the technique?